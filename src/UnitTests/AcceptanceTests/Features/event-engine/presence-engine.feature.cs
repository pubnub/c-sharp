// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AcceptanceTests.Features.Event_Engine
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Presence Event Engine")]
    [NUnit.Framework.CategoryAttribute("featureSet=presenceEventEngine")]
    [NUnit.Framework.CategoryAttribute("beta")]
    public partial class PresenceEventEngineFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "featureSet=presenceEventEngine",
                "beta"};
        
#line 1 "presence-engine.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/event-engine", "Presence Event Engine", "  Validating the correctness of EE for Presence events", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
  #line hidden
#line 6
    testRunner.Given("the demo keyset with Presence EE enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Successfully joined a few channels")]
        [NUnit.Framework.CategoryAttribute("contract=presenceTestMultipleWait")]
        public void SuccessfullyJoinedAFewChannels()
        {
            string[] tagsOfScenario = new string[] {
                    "contract=presenceTestMultipleWait"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successfully joined a few channels", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 9
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
  this.FeatureBackground();
#line hidden
#line 10
    testRunner.Given("heartbeatInterval set to \'1\', timeout set to \'60\' and suppressLeaveEvents set to " +
                        "\'false\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 11
    testRunner.When("I join \'first\', \'second\', \'third\' channels", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 12
    testRunner.Then("I wait \'3\' seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "type",
                            "name"});
                table7.AddRow(new string[] {
                            "event",
                            "JOINED"});
                table7.AddRow(new string[] {
                            "invocation",
                            "HEARTBEAT"});
                table7.AddRow(new string[] {
                            "event",
                            "HEARTBEAT_SUCCESS"});
                table7.AddRow(new string[] {
                            "invocation",
                            "WAIT"});
                table7.AddRow(new string[] {
                            "event",
                            "TIMES_UP"});
                table7.AddRow(new string[] {
                            "invocation",
                            "CANCEL_WAIT"});
                table7.AddRow(new string[] {
                            "invocation",
                            "HEARTBEAT"});
                table7.AddRow(new string[] {
                            "event",
                            "HEARTBEAT_SUCCESS"});
                table7.AddRow(new string[] {
                            "invocation",
                            "WAIT"});
                table7.AddRow(new string[] {
                            "event",
                            "TIMES_UP"});
                table7.AddRow(new string[] {
                            "invocation",
                            "CANCEL_WAIT"});
                table7.AddRow(new string[] {
                            "invocation",
                            "HEARTBEAT"});
#line 13
    testRunner.And("I observe the following Events and Invocations of the Presence EE:", ((string)(null)), table7, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Successfully joined a few channels with presence")]
        [NUnit.Framework.CategoryAttribute("contract=presenceJoin")]
        public void SuccessfullyJoinedAFewChannelsWithPresence()
        {
            string[] tagsOfScenario = new string[] {
                    "contract=presenceJoin"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successfully joined a few channels with presence", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 29
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
  this.FeatureBackground();
#line hidden
#line 30
    testRunner.Given("heartbeatInterval set to \'1\', timeout set to \'60\' and suppressLeaveEvents set to " +
                        "\'false\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 31
    testRunner.When("I join \'first\', \'second\', \'third\' channels with presence", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 32
    testRunner.Then("I wait for getting Presence joined events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "type",
                            "name"});
                table8.AddRow(new string[] {
                            "event",
                            "JOINED"});
                table8.AddRow(new string[] {
                            "invocation",
                            "HEARTBEAT"});
                table8.AddRow(new string[] {
                            "event",
                            "HEARTBEAT_SUCCESS"});
                table8.AddRow(new string[] {
                            "invocation",
                            "WAIT"});
#line 33
    testRunner.And("I observe the following Events and Invocations of the Presence EE:", ((string)(null)), table8, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Recovery from one unexpected error along the way")]
        [NUnit.Framework.CategoryAttribute("contract=presenceJoinWithAnError")]
        public void RecoveryFromOneUnexpectedErrorAlongTheWay()
        {
            string[] tagsOfScenario = new string[] {
                    "contract=presenceJoinWithAnError"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Recovery from one unexpected error along the way", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 41
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
  this.FeatureBackground();
#line hidden
#line 42
    testRunner.Given("heartbeatInterval set to \'1\', timeout set to \'60\' and suppressLeaveEvents set to " +
                        "\'false\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 43
    testRunner.Given("a linear reconnection policy with 3 retries", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 44
    testRunner.When("I join \'first\', \'second\', \'third\' channels with presence", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 45
    testRunner.Then("I wait for getting Presence joined events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "type",
                            "name"});
                table9.AddRow(new string[] {
                            "event",
                            "JOINED"});
                table9.AddRow(new string[] {
                            "invocation",
                            "HEARTBEAT"});
                table9.AddRow(new string[] {
                            "event",
                            "HEARTBEAT_FAILURE"});
                table9.AddRow(new string[] {
                            "invocation",
                            "DELAYED_HEARTBEAT"});
                table9.AddRow(new string[] {
                            "event",
                            "HEARTBEAT_SUCCESS"});
                table9.AddRow(new string[] {
                            "invocation",
                            "CANCEL_DELAYED_HEARTBEAT"});
                table9.AddRow(new string[] {
                            "invocation",
                            "WAIT"});
#line 46
    testRunner.And("I observe the following Events and Invocations of the Presence EE:", ((string)(null)), table9, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Complete handshake failure")]
        [NUnit.Framework.CategoryAttribute("contract=presenceJoinWithContinuousFailures")]
        public void CompleteHandshakeFailure()
        {
            string[] tagsOfScenario = new string[] {
                    "contract=presenceJoinWithContinuousFailures"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Complete handshake failure", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 57
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
  this.FeatureBackground();
#line hidden
#line 58
    testRunner.Given("heartbeatInterval set to \'1\', timeout set to \'60\' and suppressLeaveEvents set to " +
                        "\'false\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 59
    testRunner.Given("a linear reconnection policy with 3 retries", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 60
    testRunner.When("I join \'first\', \'second\', \'third\' channels", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 61
    testRunner.Then("I receive an error in my heartbeat response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "type",
                            "name"});
                table10.AddRow(new string[] {
                            "event",
                            "JOINED"});
                table10.AddRow(new string[] {
                            "invocation",
                            "HEARTBEAT"});
                table10.AddRow(new string[] {
                            "event",
                            "HEARTBEAT_FAILURE"});
                table10.AddRow(new string[] {
                            "invocation",
                            "DELAYED_HEARTBEAT"});
                table10.AddRow(new string[] {
                            "event",
                            "HEARTBEAT_FAILURE"});
                table10.AddRow(new string[] {
                            "invocation",
                            "CANCEL_DELAYED_HEARTBEAT"});
                table10.AddRow(new string[] {
                            "invocation",
                            "DELAYED_HEARTBEAT"});
                table10.AddRow(new string[] {
                            "event",
                            "HEARTBEAT_FAILURE"});
                table10.AddRow(new string[] {
                            "invocation",
                            "CANCEL_DELAYED_HEARTBEAT"});
                table10.AddRow(new string[] {
                            "invocation",
                            "DELAYED_HEARTBEAT"});
                table10.AddRow(new string[] {
                            "event",
                            "HEARTBEAT_FAILURE"});
                table10.AddRow(new string[] {
                            "invocation",
                            "CANCEL_DELAYED_HEARTBEAT"});
                table10.AddRow(new string[] {
                            "invocation",
                            "DELAYED_HEARTBEAT"});
                table10.AddRow(new string[] {
                            "event",
                            "HEARTBEAT_GIVEUP"});
                table10.AddRow(new string[] {
                            "invocation",
                            "CANCEL_DELAYED_HEARTBEAT"});
#line 62
    testRunner.And("I observe the following Events and Invocations of the Presence EE:", ((string)(null)), table10, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Joining and leaving channels")]
        [NUnit.Framework.CategoryAttribute("contract=presenceLeave")]
        public void JoiningAndLeavingChannels()
        {
            string[] tagsOfScenario = new string[] {
                    "contract=presenceLeave"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Joining and leaving channels", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 81
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
  this.FeatureBackground();
#line hidden
#line 82
    testRunner.Given("heartbeatInterval set to \'20\', timeout set to \'60\' and suppressLeaveEvents set to" +
                        " \'false\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 83
    testRunner.When("I join \'first\', \'second\', \'third\' channels with presence", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 84
    testRunner.Then("I wait for getting Presence joined events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 85
    testRunner.Then("I leave \'first\' and \'second\' channels with presence", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 86
    testRunner.Then("I wait \'3\' seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "type",
                            "name"});
                table11.AddRow(new string[] {
                            "event",
                            "JOINED"});
                table11.AddRow(new string[] {
                            "invocation",
                            "HEARTBEAT"});
                table11.AddRow(new string[] {
                            "event",
                            "HEARTBEAT_SUCCESS"});
                table11.AddRow(new string[] {
                            "invocation",
                            "WAIT"});
                table11.AddRow(new string[] {
                            "event",
                            "LEFT"});
                table11.AddRow(new string[] {
                            "invocation",
                            "CANCEL_WAIT"});
                table11.AddRow(new string[] {
                            "invocation",
                            "LEAVE"});
                table11.AddRow(new string[] {
                            "invocation",
                            "HEARTBEAT"});
                table11.AddRow(new string[] {
                            "event",
                            "HEARTBEAT_SUCCESS"});
                table11.AddRow(new string[] {
                            "invocation",
                            "WAIT"});
#line 87
    testRunner.And("I observe the following Events and Invocations of the Presence EE:", ((string)(null)), table11, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Joining a few channels with heartbeat interval set to 0")]
        [NUnit.Framework.CategoryAttribute("contract=presenceJoinWithHeartbeatDisabled")]
        public void JoiningAFewChannelsWithHeartbeatIntervalSetTo0()
        {
            string[] tagsOfScenario = new string[] {
                    "contract=presenceJoinWithHeartbeatDisabled"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Joining a few channels with heartbeat interval set to 0", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 101
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
  this.FeatureBackground();
#line hidden
#line 102
    testRunner.Given("heartbeatInterval set to \'0\', timeout set to \'60\' and suppressLeaveEvents set to " +
                        "\'false\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 103
    testRunner.When("I join \'first\', \'second\', \'third\' channels", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 104
    testRunner.Then("I don\'t observe any Events and Invocations of the Presence EE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
