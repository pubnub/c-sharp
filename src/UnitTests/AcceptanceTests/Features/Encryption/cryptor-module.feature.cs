// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AcceptanceTests.Features.Encryption
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Crypto module")]
    [NUnit.Framework.CategoryAttribute("featureSet=cryptoModule")]
    [NUnit.Framework.CategoryAttribute("beta")]
    public partial class CryptoModuleFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "featureSet=cryptoModule",
                "beta"};
        
#line 1 "cryptor-module.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Encryption", "Crypto module", "  As a PubNub user\r\n  I want to be able to encrypt data using crypto module\r\n  I " +
                    "want to be able to decrypt data generated by previous cryptors", ProgrammingLanguage.CSharp, new string[] {
                        "featureSet=cryptoModule",
                        "beta"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AES-CBC cryptor data header can be processed")]
        [NUnit.Framework.TestCaseAttribute("pubnubenigma", "file-legacy-civ.jpg", "unknown cryptor error", null)]
        [NUnit.Framework.TestCaseAttribute("pubnubenigma", "file-cryptor-no-version.txt", "decryption error", null)]
        [NUnit.Framework.TestCaseAttribute("pubnubenigma", "file-cryptor-unknown-acrh.jpg", "unknown cryptor error", null)]
        [NUnit.Framework.TestCaseAttribute("pubnubenigma", "file-cryptor-v1-short.txt", "decryption error", null)]
        [NUnit.Framework.TestCaseAttribute("pubnubenigma", "file-cryptor-v1-unknown.txt", "unknown cryptor error", null)]
        [NUnit.Framework.TestCaseAttribute("pubnubenigma", "file-cryptor-v1-acrh.jpg", "success", null)]
        [NUnit.Framework.TestCaseAttribute("pubnubenigma", "empty-file-cryptor-v1-acrh.txt", "success", null)]
        public virtual void AES_CBCCryptorDataHeaderCanBeProcessed(string cipher_Key, string file, string outcome, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("cipher_key", cipher_Key);
            argumentsOfScenario.Add("file", file);
            argumentsOfScenario.Add("outcome", outcome);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AES-CBC cryptor data header can be processed", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 7
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
    testRunner.Given("Crypto module with \'acrh\' cryptor", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
    testRunner.And(string.Format("with \'{0}\' cipher key", cipher_Key), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 10
    testRunner.When(string.Format("I decrypt \'{0}\' file", file), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 11
    testRunner.Then(string.Format("I receive \'{0}\'", outcome), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Data encrypted with legacy AES-CBC cryptor is decryptable with legacy implementat" +
            "ion")]
        [NUnit.Framework.TestCaseAttribute("pubnubenigma", "random", "file.jpg", null)]
        [NUnit.Framework.TestCaseAttribute("pubnubenigma", "constant", "file.jpg", null)]
        [NUnit.Framework.TestCaseAttribute("pubnubenigma", "random", "file.txt", null)]
        [NUnit.Framework.TestCaseAttribute("pubnubenigma", "constant", "file.txt", null)]
        [NUnit.Framework.TestCaseAttribute("pubnubenigma", "random", "empty-file.txt", null)]
        [NUnit.Framework.TestCaseAttribute("pubnubenigma", "constant", "empty-file.txt", null)]
        public virtual void DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(string cipher_Key, string vector, string file, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("cipher_key", cipher_Key);
            argumentsOfScenario.Add("vector", vector);
            argumentsOfScenario.Add("file", file);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Data encrypted with legacy AES-CBC cryptor is decryptable with legacy implementat" +
                    "ion", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 30
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 31
    testRunner.Given("Crypto module with \'legacy\' cryptor", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 32
    testRunner.Given(string.Format("Legacy code with \'{0}\' cipher key and \'{1}\' vector", cipher_Key, vector), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 33
    testRunner.And(string.Format("with \'{0}\' cipher key", cipher_Key), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 34
    testRunner.And(string.Format("with \'{0}\' vector", vector), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 35
    testRunner.When(string.Format("I encrypt \'{0}\' file as \'binary\'", file), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 36
    testRunner.Then("Successfully decrypt an encrypted file with legacy code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Stream data encrypted with legacy AES-CBC cryptor is decryptable with legacy impl" +
            "ementation")]
        [NUnit.Framework.TestCaseAttribute("pubnubenigma", "random", "file.jpg", null)]
        [NUnit.Framework.TestCaseAttribute("pubnubenigma", "random", "file.txt", null)]
        [NUnit.Framework.TestCaseAttribute("pubnubenigma", "random", "empty-file.txt", null)]
        public virtual void StreamDataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(string cipher_Key, string vector, string file, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("cipher_key", cipher_Key);
            argumentsOfScenario.Add("vector", vector);
            argumentsOfScenario.Add("file", file);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Stream data encrypted with legacy AES-CBC cryptor is decryptable with legacy impl" +
                    "ementation", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 49
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 50
    testRunner.Given("Crypto module with \'legacy\' cryptor", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 51
    testRunner.Given(string.Format("Legacy code with \'{0}\' cipher key and \'{1}\' vector", cipher_Key, vector), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 52
    testRunner.And(string.Format("with \'{0}\' cipher key", cipher_Key), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 53
    testRunner.And(string.Format("with \'{0}\' vector", vector), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 54
    testRunner.When(string.Format("I encrypt \'{0}\' file as \'stream\'", file), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 55
    testRunner.Then("Successfully decrypt an encrypted file with legacy code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cryptor is able to process sample files as binary")]
        [NUnit.Framework.TestCaseAttribute("legacy", "pubnubenigma", "constant", "file-cryptor-legacy-civ.jpg", "file.jpg", null)]
        [NUnit.Framework.TestCaseAttribute("legacy", "pubnubenigma", "random", "file-cryptor-legacy-riv.jpg", "file.jpg", null)]
        [NUnit.Framework.TestCaseAttribute("legacy", "pubnubenigma", "constant", "file-cryptor-legacy-civ.txt", "file.txt", null)]
        [NUnit.Framework.TestCaseAttribute("legacy", "pubnubenigma", "random", "file-cryptor-legacy-riv.txt", "file.txt", null)]
        [NUnit.Framework.TestCaseAttribute("legacy", "pubnubenigma", "constant", "empty-file-cryptor-legacy-civ.txt", "empty-file.txt", null)]
        [NUnit.Framework.TestCaseAttribute("legacy", "pubnubenigma", "random", "empty-file-cryptor-legacy-riv.txt", "empty-file.txt", null)]
        [NUnit.Framework.TestCaseAttribute("legacy", "pubnubenigma", "constant", "file-legacy-civ.jpg", "file.jpg", null)]
        [NUnit.Framework.TestCaseAttribute("legacy", "pubnubenigma", "random", "file-legacy-riv.jpg", "file.jpg", null)]
        [NUnit.Framework.TestCaseAttribute("legacy", "pubnubenigma", "constant", "file-legacy-civ.txt", "file.txt", null)]
        [NUnit.Framework.TestCaseAttribute("legacy", "pubnubenigma", "random", "file-legacy-riv.txt", "file.txt", null)]
        [NUnit.Framework.TestCaseAttribute("legacy", "pubnubenigma", "constant", "empty-file-legacy-civ.txt", "empty-file.txt", null)]
        [NUnit.Framework.TestCaseAttribute("legacy", "pubnubenigma", "random", "empty-file-legacy-riv.txt", "empty-file.txt", null)]
        [NUnit.Framework.TestCaseAttribute("acrh", "pubnubenigma", "-", "file-cryptor-v1-acrh.jpg", "file.jpg", null)]
        [NUnit.Framework.TestCaseAttribute("acrh", "pubnubenigma", "-", "file-cryptor-v1-acrh.txt", "file.txt", null)]
        [NUnit.Framework.TestCaseAttribute("acrh", "pubnubenigma", "-", "empty-file-cryptor-v1-acrh.txt", "empty-file.txt", null)]
        public virtual void CryptorIsAbleToProcessSampleFilesAsBinary(string cryptor_Id, string cipher_Key, string vector, string encrypted_File, string source_File, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("cryptor_id", cryptor_Id);
            argumentsOfScenario.Add("cipher_key", cipher_Key);
            argumentsOfScenario.Add("vector", vector);
            argumentsOfScenario.Add("encrypted_file", encrypted_File);
            argumentsOfScenario.Add("source_file", source_File);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cryptor is able to process sample files as binary", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 63
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 64
    testRunner.Given(string.Format("Crypto module with \'{0}\' cryptor", cryptor_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 65
    testRunner.And(string.Format("with \'{0}\' cipher key", cipher_Key), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 66
    testRunner.And(string.Format("with \'{0}\' vector", vector), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 67
    testRunner.When(string.Format("I decrypt \'{0}\' file as \'binary\'", encrypted_File), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 68
    testRunner.Then(string.Format("Decrypted file content equal to the \'{0}\' file content", source_File), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cryptor is able to process sample files as stream")]
        [NUnit.Framework.TestCaseAttribute("legacy", "pubnubenigma", "random", "file-cryptor-legacy-riv.jpg", "file.jpg", null)]
        [NUnit.Framework.TestCaseAttribute("legacy", "pubnubenigma", "random", "file-cryptor-legacy-riv.txt", "file.txt", null)]
        [NUnit.Framework.TestCaseAttribute("legacy", "pubnubenigma", "random", "empty-file-cryptor-legacy-riv.txt", "empty-file.txt", null)]
        [NUnit.Framework.TestCaseAttribute("legacy", "pubnubenigma", "random", "file-legacy-riv.jpg", "file.jpg", null)]
        [NUnit.Framework.TestCaseAttribute("legacy", "pubnubenigma", "random", "file-legacy-riv.txt", "file.txt", null)]
        [NUnit.Framework.TestCaseAttribute("legacy", "pubnubenigma", "random", "empty-file-legacy-riv.txt", "empty-file.txt", null)]
        [NUnit.Framework.TestCaseAttribute("acrh", "pubnubenigma", "-", "file-cryptor-v1-acrh.jpg", "file.jpg", null)]
        [NUnit.Framework.TestCaseAttribute("acrh", "pubnubenigma", "-", "file-cryptor-v1-acrh.txt", "file.txt", null)]
        [NUnit.Framework.TestCaseAttribute("acrh", "pubnubenigma", "-", "empty-file-cryptor-v1-acrh.txt", "empty-file.txt", null)]
        public virtual void CryptorIsAbleToProcessSampleFilesAsStream(string cryptor_Id, string cipher_Key, string vector, string encrypted_File, string source_File, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("cryptor_id", cryptor_Id);
            argumentsOfScenario.Add("cipher_key", cipher_Key);
            argumentsOfScenario.Add("vector", vector);
            argumentsOfScenario.Add("encrypted_file", encrypted_File);
            argumentsOfScenario.Add("source_file", source_File);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cryptor is able to process sample files as stream", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 90
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 91
    testRunner.Given(string.Format("Crypto module with \'{0}\' cryptor", cryptor_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 92
    testRunner.And(string.Format("with \'{0}\' cipher key", cipher_Key), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 93
    testRunner.And(string.Format("with \'{0}\' vector", vector), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 94
    testRunner.When(string.Format("I decrypt \'{0}\' file as \'stream\'", encrypted_File), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 95
    testRunner.Then(string.Format("Decrypted file content equal to the \'{0}\' file content", source_File), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Crypto module can handle encrypted data from different cryptors")]
        [NUnit.Framework.TestCaseAttribute("legacy", "acrh", "pubnubenigma", "constant", "file-cryptor-legacy-civ.jpg", "file.jpg", null)]
        [NUnit.Framework.TestCaseAttribute("acrh", "legacy", "pubnubenigma", "random", "file-legacy-riv.jpg", "file.jpg", null)]
        [NUnit.Framework.TestCaseAttribute("legacy", "acrh", "pubnubenigma", "constant", "empty-file-cryptor-legacy-civ.txt", "empty-file.txt", null)]
        [NUnit.Framework.TestCaseAttribute("acrh", "legacy", "pubnubenigma", "random", "empty-file-legacy-riv.txt", "empty-file.txt", null)]
        public virtual void CryptoModuleCanHandleEncryptedDataFromDifferentCryptors(string cryptor_Id1, string cryptor_Id2, string cipher_Key, string vector, string encrypted_File, string source_File, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("cryptor_id1", cryptor_Id1);
            argumentsOfScenario.Add("cryptor_id2", cryptor_Id2);
            argumentsOfScenario.Add("cipher_key", cipher_Key);
            argumentsOfScenario.Add("vector", vector);
            argumentsOfScenario.Add("encrypted_file", encrypted_File);
            argumentsOfScenario.Add("source_file", source_File);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Crypto module can handle encrypted data from different cryptors", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 109
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 110
    testRunner.Given(string.Format("Crypto module with default \'{0}\' and additional \'{1}\' cryptors", cryptor_Id1, cryptor_Id2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 111
    testRunner.And(string.Format("with \'{0}\' cipher key", cipher_Key), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 112
    testRunner.And(string.Format("with \'{0}\' vector", vector), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 113
    testRunner.When(string.Format("I decrypt \'{0}\' file as \'binary\'", encrypted_File), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 114
    testRunner.Then(string.Format("Decrypted file content equal to the \'{0}\' file content", source_File), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
